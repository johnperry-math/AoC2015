--  Advent of Code 2015
--  John Perry
--
--  implementation of atomic expansion of the look-and-say sequence

pragma Ada_2022;

package body Atomic is

   Decays_Into : constant array (Element_Enum) of Elem_Vector :=
     [H       => [H],
      He      => [Hf, Pa, H, Ca, Li],
      Li      => [He],
      Be      => [Ge, Ca, Li],
      B       => [Be],
      C       => [B],
      N       => [C],
      O       => [N],
      F       => [O],
      Ne      => [F],
      Na      => [Ne],
      Mg      => [Pm, Na],
      Al      => [Mg],
      Si      => [Al],
      P       => [Ho, Si],
      S       => [P],
      Cl      => [S],
      Ar      => [Cl],
      K       => [Ar],
      Ca      => [K],
      Sc      => [Ho, Pa, H, Ca, Co],
      Ti      => [Sc],
      V       => [Ti],
      Cr      => [V],
      Mn      => [Cr, Si],
      Fe      => [Mn],
      Co      => [Fe],
      Ni      => [Zn, Co],
      Cu      => [Ni],
      Zn      => [Cu],
      Ga      => [Eu, Ca, Ac, H, Ca, Zn],
      Ge      => [Ho, Ga],
      As      => [Ge, Na],
      Se      => [As],
      Br      => [Se],
      Kr      => [Br],
      Rb      => [Kr],
      Sr      => [Rb],
      Y       => [Sr, U],
      Zr      => [Y, H, Ca, Tc],
      Nb      => [Er, Zr],
      Mo      => [Nb],
      Tc      => [Mo],
      Ru      => [Eu, Ca, Tc],
      Rh      => [Ho, Ru],
      Pd      => [Rh],
      Ag      => [Pd],
      Cd      => [Ag],
      In_Atom => [Cd],
      Sn      => [In_Atom],
      Sb      => [Pm, Sn],
      Te      => [Eu, Ca, Sb],
      I       => [Ho, Te],
      Xe      => [I],
      Cs      => [Xe],
      Ba      => [Cs],
      La      => [Ba],
      Ce      => [La, H, Ca, Co],
      Pr      => [Ce],
      Nd      => [Pr],
      Pm      => [Nd],
      Sm      => [Pm, Ca, Zn],
      Eu      => [Sm],
      Gd      => [Eu, Ca, Co],
      Tb      => [Ho, Gd],
      Dy      => [Tb],
      Ho      => [Dy],
      Er      => [Ho, Pm],
      Tm      => [Er, Ca, Co],
      Yb      => [Tm],
      Lu      => [Yb],
      Hf      => [Lu],
      Ta      => [Hf, Pa, H, Ca, W],
      W       => [Ta],
      Re      => [Ge, Ca, W],
      Os      => [Re],
      Ir      => [Os],
      Pt      => [Ir],
      Au      => [Pt],
      Hg      => [Au],
      Tl      => [Hg],
      Pb      => [Tl],
      Bi      => [Pm, Pb],
      Po      => [Bi],
      At_Atom => [Po],
      Rn      => [Ho, At_Atom],
      Fr      => [Rn],
      Ra      => [Fr],
      Ac      => [Ra],
      Th      => [Ac],
      Pa      => [Th],
      U       => [Pa]];
   --  how an element decayse, according to
   --  https://en.wikipedia.org/wiki/Look-and-say_sequence#Cosmological_decay

   Sequences : constant array (Element_Enum) of Positive_Vector :=
     [H       => [2, 2],
      He      =>
        [1,
         3,
         1,
         1,
         2,
         2,
         2,
         1,
         1,
         3,
         3,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         2,
         2,
         1,
         1,
         2,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         2],
      Li      =>
        [3,
         1,
         2,
         2,
         1,
         1,
         3,
         2,
         2,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         2,
         1,
         1,
         2,
         3,
         2,
         2,
         2,
         1,
         1,
         2],
      Be      =>
        [1,
         1,
         1,
         3,
         1,
         2,
         2,
         1,
         1,
         3,
         1,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         3,
         3,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         2,
         2,
         1,
         1,
         2,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         2],
      B       =>
        [1,
         3,
         2,
         1,
         1,
         3,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         3,
         2,
         2,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         2,
         1,
         1,
         2,
         3,
         2,
         2,
         2,
         1,
         1,
         2],
      C       =>
        [3,
         1,
         1,
         3,
         1,
         1,
         2,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         2,
         2,
         1,
         1,
         2,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         2],
      N       =>
        [1,
         1,
         1,
         3,
         1,
         2,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         2,
         1,
         1,
         2,
         3,
         2,
         2,
         2,
         1,
         1,
         2],
      O       => [1, 3, 2, 1, 1, 2, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 1, 2],
      F       => [3, 1, 1, 2, 1, 1, 2, 3, 2, 2, 2, 1, 1, 2],
      Ne      => [1, 1, 1, 2, 1, 3, 3, 2, 2, 1, 1, 2],
      Na      => [1, 2, 3, 2, 2, 2, 1, 1, 2],
      Mg      => [3, 1, 1, 3, 3, 2, 2, 1, 1, 2],
      Al      => [1, 1, 1, 3, 2, 2, 2, 1, 1, 2],
      Si      => [1, 3, 2, 2, 1, 1, 2],
      P       => [3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 2],
      S       => [1, 1, 1, 3, 1, 2, 2, 1, 1, 2],
      Cl      => [1, 3, 2, 1, 1, 2],
      Ar      => [3, 1, 1, 2],
      K       => [1, 1, 1, 2],
      Ca      => [1, 2],
      Sc      => [3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 3, 3, 1, 1, 2],
      Ti      => [1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 1, 1, 1, 2],
      V       => [1, 3, 2, 1, 1, 3, 1, 2],
      Cr      => [3, 1, 1, 3, 2],
      Mn      => [1, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 2],
      Fe      => [1, 3, 1, 2, 2, 1, 1, 2],
      Co      => [3, 2, 1, 1, 2],
      Ni      => [1, 1, 1, 3, 3, 1, 1, 2],
      Cu      => [1, 3, 1, 1, 1, 2],
      Zn      => [3, 1, 2],
      Ga      => [1, 3, 2, 2, 1, 1, 3, 3, 1, 2, 2, 2, 1, 1, 3, 3, 2],
      Ge      =>
        [3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 3, 2, 2, 2],
      As      =>
        [1,
         1,
         1,
         3,
         1,
         2,
         2,
         1,
         1,
         3,
         1,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         2],
      Se      => [1, 3, 2, 1, 1, 3, 2, 1, 2, 2, 2, 1, 1, 3, 2, 2, 2, 1, 1, 2],
      Br      => [3, 1, 1, 3, 1, 1, 2, 2, 1, 1, 3, 2, 2, 1, 1, 2],
      Kr      => [1, 1, 1, 3, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2],
      Rb      => [1, 3, 2, 1, 1, 2, 2, 1, 1, 2],
      Sr      => [3, 1, 1, 2, 1, 1, 2],
      Y       => [1, 1, 1, 2, 1, 3, 3],
      Zr      =>
        [1, 2, 3, 2, 2, 2, 1, 1, 3, 3, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 2, 1, 1],
      Nb      =>
        [1,
         1,
         1,
         3,
         1,
         2,
         2,
         1,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         3,
         1,
         1,
         1,
         2,
         2,
         1,
         1,
         3,
         1,
         2,
         2,
         1],
      Mo      => [1, 3, 2, 1, 1, 3, 2, 2, 2, 1, 1, 3, 1, 2, 1, 1, 3, 2, 1, 1],
      Tc      => [3, 1, 1, 3, 2, 2, 1, 1, 3, 2, 1, 2, 2, 2, 1],
      Ru      =>
        [1, 3, 2, 2, 1, 1, 3, 3, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 2, 1, 1],
      Rh      =>
        [3,
         1,
         1,
         3,
         1,
         1,
         2,
         2,
         2,
         1,
         1,
         3,
         1,
         1,
         1,
         2,
         2,
         1,
         1,
         3,
         1,
         2,
         2,
         1],
      Pd      => [1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 1, 3, 2, 1, 1],
      Ag      => [1, 3, 2, 1, 1, 3, 2, 1, 2, 2, 2, 1],
      Cd      => [3, 1, 1, 3, 1, 1, 2, 2, 1, 1],
      In_Atom => [1, 1, 1, 3, 1, 2, 2, 1],
      Sn      => [1, 3, 2, 1, 1],
      Sb      => [3, 1, 1, 2, 2, 2, 1],
      Te      => [1, 3, 2, 2, 1, 1, 3, 3, 1, 2, 2, 1, 1],
      I       => [3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 1, 2, 2, 1],
      Xe      => [1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 1],
      Cs      => [1, 3, 2, 1, 1, 3, 2, 1],
      Ba      => [3, 1, 1, 3, 1, 1],
      La      => [1, 1, 1, 3, 1],
      Ce      => [1, 3, 2, 1, 1, 3, 3, 1, 1, 2],
      Pr      => [3, 1, 1, 3, 1, 1, 1, 2],
      Nd      => [1, 1, 1, 3, 1, 2],
      Pm      => [1, 3, 2],
      Sm      => [3, 1, 1, 3, 3, 2],
      Eu      => [1, 1, 1, 3, 2, 2, 2],
      Gd      => [1, 3, 2, 2, 1, 1, 3, 3, 1, 1, 2],
      Tb      => [3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 1, 2],
      Dy      => [1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 1, 2],
      Ho      => [1, 3, 2, 1, 1, 3, 2],
      Er      => [3, 1, 1, 3, 1, 1, 2, 2, 2],
      Tm      => [1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 3, 1, 1, 2],
      Yb      => [1, 3, 2, 1, 1, 3, 1, 1, 1, 2],
      Lu      => [3, 1, 1, 3, 1, 2],
      Hf      => [1, 1, 1, 3, 2],
      Ta      =>
        [1,
         3,
         1,
         1,
         2,
         2,
         2,
         1,
         1,
         3,
         3,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         2,
         2,
         1,
         1,
         2,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         3],
      W       =>
        [3,
         1,
         2,
         2,
         1,
         1,
         3,
         2,
         2,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         2,
         1,
         1,
         2,
         3,
         2,
         2,
         2,
         1,
         1,
         3],
      Re      =>
        [1,
         1,
         1,
         3,
         1,
         2,
         2,
         1,
         1,
         3,
         1,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         3,
         3,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         2,
         2,
         1,
         1,
         2,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         3],
      Os      =>
        [1,
         3,
         2,
         1,
         1,
         3,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         3,
         2,
         2,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         2,
         1,
         1,
         2,
         3,
         2,
         2,
         2,
         1,
         1,
         3],
      Ir      =>
        [3,
         1,
         1,
         3,
         1,
         1,
         2,
         2,
         1,
         1,
         3,
         2,
         2,
         1,
         1,
         2,
         2,
         1,
         1,
         2,
         1,
         3,
         3,
         2,
         2,
         1,
         1,
         3],
      Pt      =>
        [1,
         1,
         1,
         3,
         1,
         2,
         2,
         1,
         2,
         2,
         2,
         1,
         1,
         2,
         1,
         1,
         2,
         3,
         2,
         2,
         2,
         1,
         1,
         3],
      Au      => [1, 3, 2, 1, 1, 2, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 1, 3],
      Hg      => [3, 1, 1, 2, 1, 1, 2, 3, 2, 2, 2, 1, 1, 3],
      Tl      => [1, 1, 1, 2, 1, 3, 3, 2, 2, 1, 1, 3],
      Pb      => [1, 2, 3, 2, 2, 2, 1, 1, 3],
      Bi      => [3, 1, 1, 3, 3, 2, 2, 1, 1, 3],
      Po      => [1, 1, 1, 3, 2, 2, 2, 1, 1, 3],
      At_Atom => [1, 3, 2, 2, 1, 1, 3],
      Rn      => [3, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 3],
      Fr      => [1, 1, 1, 3, 1, 2, 2, 1, 1, 3],
      Ra      => [1, 3, 2, 1, 1, 3],
      Ac      => [3, 1, 1, 3],
      Th      => [1, 1, 1, 3],
      Pa      => [1, 3],
      U       => [3]];
   --  mapping of Elements to Positive_Vectors

   Invalid_Sequence : exception;

   function Identify_Atom_For (Sequence : Positive_Vector) return Element_Enum
   is
      use all type Positive_Vector;
   begin
      for Element in Element_Enum loop
         if Sequences (Element) = Sequence then
            return Element;
         end if;
      end loop;
      raise Invalid_Sequence;
   end Identify_Atom_For;

   function Decay (Count : Elem_Count_Array) return Elem_Count_Array is
      Result : Elem_Count_Array := [others => 0];
   begin
      for Element in Element_Enum when Count (Element) > 0 loop
         declare
            Decomposition : constant Elem_Vector := Decays_Into (Element);
         begin
            for Elem of Decomposition loop
               Result (Elem) := @ + Count (Element);
            end loop;
         end;
      end loop;
      return Result;
   end Decay;

   function Expanded_Length (Count : Elem_Count_Array) return Element_Count is
      Result : Element_Count := 0;
   begin
      for Element in Element_Enum loop
         Result :=
           Result
           + Element_Count (Sequences (Element).Length) * Count (Element);
      end loop;
      return Result;
   end Expanded_Length;

end Atomic;
